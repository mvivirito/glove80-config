/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Matt Sturgeon
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        symbols: symbols {
            compatible = "zmk,behavior-tap-dance";
            label = "SYMBOLS";
            #binding-cells = <0>;
            bindings = <&mo 1>, <&to 1>;
        };

        nav: nav {
            compatible = "zmk,behavior-tap-dance";
            label = "NAV";
            #binding-cells = <0>;
            bindings = <&mo 2>, <&to 2>;
        };

        smart_lshift: smart_lshift {
            compatible = "zmk,behavior-tap-dance";
            label = "SMART_LSHIFT";
            #binding-cells = <0>;
            bindings = <&kp LSHFT>, <&caps_word>;
        };

        smart_rshift: smart_rshift {
            compatible = "zmk,behavior-tap-dance";
            label = "SMART_RSHIFT";
            #binding-cells = <0>;
            bindings = <&kp RSHFT>, <&caps_word>;
        };

        quotes: quotes {
            compatible = "zmk,behavior-mod-morph";
            label = "QUOTES";
            bindings = <&kp SINGLE_QUOTE>, <&kp AT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        question_excl: question_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "QUESTION_EXCL";
            bindings = <&kp QUESTION>, <&kp EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dash_slash: dash_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "DASH_SLASH";
            bindings = <&kp MINUS>, <&kp SLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            bindings = <&kp DOT>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comma_semi: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMI";
            bindings = <&kp COMMA>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        under_backsl: under_backsl {
            compatible = "zmk,behavior-mod-morph";
            label = "UNDER_BACKSL";
            bindings = <&kp UNDERSCORE>, <&kp NON_US_BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        zero_f10: zero_f10 {
            compatible = "zmk,behavior-mod-morph";
            label = "ZERO_F10";
            bindings = <&kp N0>, <&kp F10>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        one_f1: one_f1 {
            compatible = "zmk,behavior-mod-morph";
            label = "ONE_F1";
            bindings = <&kp N1>, <&kp F1>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        two_f2: two_f2 {
            compatible = "zmk,behavior-mod-morph";
            label = "TWO_F2";
            bindings = <&kp N2>, <&kp F2>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        three_f3: three_f3 {
            compatible = "zmk,behavior-mod-morph";
            label = "THREE_F3";
            bindings = <&kp N3>, <&kp F3>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        four_f4: four_f4 {
            compatible = "zmk,behavior-mod-morph";
            label = "FOUR_F4";
            bindings = <&kp N4>, <&kp F4>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        five_f5: five_f5 {
            compatible = "zmk,behavior-mod-morph";
            label = "FIVE_F5";
            bindings = <&kp N5>, <&kp F5>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        six_f6: six_f6 {
            compatible = "zmk,behavior-mod-morph";
            label = "SIX_F6";
            bindings = <&kp N6>, <&kp F6>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        sev_f7: sev_f7 {
            compatible = "zmk,behavior-mod-morph";
            label = "SEV_F7";
            bindings = <&kp N7>, <&kp F7>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        eight_f8: eight_f8 {
            compatible = "zmk,behavior-mod-morph";
            label = "EIGHT_F8";
            bindings = <&kp N8>, <&kp F8>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        nine_f9: nine_f9 {
            compatible = "zmk,behavior-mod-morph";
            label = "NINE_F9";
            bindings = <&kp N9>, <&kp F9>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mult_f11: mult_f11 {
            compatible = "zmk,behavior-mod-morph";
            label = "MULT_F11";
            bindings = <&kp KP_MULTIPLY>, <&kp F11>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        eq_f12: eq_f12 {
            compatible = "zmk,behavior-mod-morph";
            label = "EQ_F12";
            bindings = <&kp KP_EQUAL>, <&kp F12>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        dbl_shift {
            bindings = <&caps_word>;
            key-positions = <52 57>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp F1                &kp F2      &kp F3     &kp F4                &kp F5                                                                                                                                                           &kp F6            &kp F7     &kp F8      &kp F9      &kp F10
&kp GRAVE             &kp N1      &kp N2     &kp N3                &kp N4                 &kp N5                                                                                                                            &kp N6  &kp N7            &kp N8     &kp N9      &kp N0      &kp MINUS
&lt 5 MINUS           &kp Q       &kp W      &kp E                 &kp R                  &kp T                                                                                                                             &kp Y   &kp U             &kp I      &kp O       &kp P       &kp BSLH
&mt LEFT_META ESCAPE  &kp A       &kp S      &kp D                 &kp F                  &kp G                                                                                                                             &kp H   &kp J             &kp K      &kp L       &lt 2 SEMI  &kp SQT
&kp LSHFT             &kp Z       &kp X      &kp C                 &kp V                  &kp B   &smart_lshift  &nav           &kp LEFT_ALT              &kp LEFT_ALT           &nav               &smart_rshift           &kp N   &kp M             &kp COMMA  &kp DOT     &kp FSLH    &kp RIGHT_SHIFT
&kp MINUS             &magic 4 0  &kp TILDE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS          &kp SPACE      &kp BACKSPACE  &mt LEFT_CONTROL LS(TAB)  &mt RIGHT_CONTROL TAB  &mt LEFT_META TAB  &mt LEFT_CONTROL ENTER          &kp LEFT_BRACKET  &kp RBKT   &magic 4 0  &mo 1       &kp EQUAL
            >;
        };

        symbols_layer {
            bindings = <
&trans  &trans                &trans     &trans        &trans                                                                                          &trans     &trans    &trans    &trans     &trans
&trans  &trans                &trans     &trans        &trans          &trans                                                           &trans         &trans     &trans    &trans    &trans     &trans
&trans  &kp GRAVE             &kp LT     &kp GT        &kp AT          &kp POUND                                                        &kp COLON      &kp PRCNT  &kp LBKT  &kp RBKT  &kp CARET  &trans
&trans  &kp TILDE2            &kp MINUS  &kp PLUS      &kp EQUAL       &kp NON_US_HASH                                                  &kp QMARK      &kp EXCL   &kp LPAR  &kp RPAR  &kp AMPS   &kp DOUBLE_QUOTES
&trans  &kp NON_US_BACKSLASH  &kp SLASH  &kp ASTERISK  &kp APOSTROPHE  &kp RA(N4)       &trans  &none   &trans  &trans  &none   &trans  &kp SEMICOLON  &kp DLLR   &kp LBRC  &kp RBRC  &kp PIPE2  &trans
&trans  &trans                &trans     &trans        &trans                           &trans  &trans  &trans  &trans  &trans  &trans                 &trans     &trans    &trans    &tog 1     &trans
            >;
        };

        navigation_layer {
            bindings = <
&trans     &trans     &trans      &trans          &trans                                                                                     &trans             &trans         &trans           &trans  &trans
&trans     &trans     &trans      &trans          &trans           &trans                                                     &trans         &trans             &trans         &trans           &trans  &trans
&trans     &trans     &trans      &trans          &trans           &trans                                                     &kp PG_UP      &kp TILDE          &kp PIPE       &trans           &trans  &trans
&kp DEL    &mkp LCLK  &trans      &trans          &trans           &mkp RCLK                                                  &kp LEFT       &kp DOWN           &kp UP         &kp RIGHT_ARROW  &trans  &trans
&trans     &trans     &trans      &trans          &trans           &kp SLASH  &trans  &trans  &trans  &trans  &trans  &trans  &kp BACKSLASH  &kp C_VOLUME_DOWN  &kp C_MUTE     &kp C_VOLUME_UP  &trans  &trans
&kp UNDER  &trans     &kp DOLLAR  &kp LEFT_BRACE  &kp RIGHT_BRACE             &trans  &trans  &trans  &trans  &trans  &trans                 &kp SLASH          &kp BACKSLASH  &kp C_NEXT       &trans  &trans
            >;
        };

        gaming_layer {
            bindings = <
&trans  &trans     &trans  &trans  &trans                                                                         &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans  &trans  &trans  &trans                                                         &trans  &trans  &trans  &trans  &trans  &trans
&none   &kp TAB    &kp Q   &kp W   &kp E   &kp R                                                          &trans  &trans  &trans  &trans  &trans  &trans
&none   &kp LSHFT  &kp A   &kp S   &kp D   &kp F                                                          &trans  &trans  &trans  &trans  &trans  &trans
&none   &kp LCTRL  &kp Z   &kp X   &kp C   &kp V   &kp T      &kp G    &kp B      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&tog 3  &kp LALT   &none   &none   &none           &kp SPACE  &kp ESC  &kp GRAVE  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };

        numpad {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                  &trans           &trans           &trans           &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans           &trans           &trans           &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &kp KP_NUMBER_7  &kp KP_N8        &kp KP_NUMBER_9  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &kp COLON        &kp KP_NUMBER_0  &kp PERIOD       &trans  &trans
            >;
        };
    };
};

&caps_word { continue-list = <UNDERSCORE BACKSPACE DELETE MINUS KP_MINUS>; };
